# 서버 포트 번호
server.port = 8092

# JSP View Resoler, webapp, WEB-INF 폴더가 없음 
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp



# HikariCP settings
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000


spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=hr
spring.datasource.password=java1234

# MyBatis> 이건 처음했던 방식이다. 근데 우리는 두번쨰 방식 쓸거
# mybatis.mapper-locations=classpath:mapper/*.xml

#Thymeleaf 
spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# 이전에 내용을 캐싱시켜준거 보여주는데 속도 빠르게 해주는데
# 개발할때는 고친게 눈에 바로 보여야 한다. 캐시 활성화 끈다. 
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8


# MyBatis > 패키지 별칭을 만들 수 있다. 이거 한줄을 쓰면 패키지 생략이 가능하다. 
# mybatis.type-aliases-package=com.test.domain
# 얘는 클래스 별칭을 줄 수 있다. 
mybatis.config-location=classpath:mybatis-config.xml

# 스프링 메시지
spring.messages.basename=messages
spring.messages.encoding=UTF-8

# 다국어만 이렇게 쓰는게 아니라 반복되는 주소 같은거 쓸 떄도 있다.
# 스프링 메세지 


# http://localhost:8092/m8
# http://localhost:8092/spring/m8

# 이걸 써서 @{ }안에 넣는 경우
# server.servlet.context-path=/spring


